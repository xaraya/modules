<?xml version="1.0" encoding="utf-8"?>
<xar:template xmlns:xar="http://xaraya.com/2004/blocklayout">
    <!-- License: GPL http://www.gnu.org/copyleft/gpl.html -->
    <xar:style scope="module" module="base" file="navtabs"/>
    <xar:template file="admin-mod-head"/>

    <div class="xar-mod-body">
      <xar:var name="label">Official Icon</xar:var>
      <img src="#xarTpl::getImage('module-generic.png','base')#" class="xar-module-icon" alt="#$label#" width="96" height="96"/>
        <h2>Overview</h2>
            <h3>What is it?</h3>
    
            <p>
            	The LogConfig module lets you configure the Xaraya logging system. It is essentially a wrapper for the logging parts of the configuration files found at
            <ul>
                <li>
                	var/config.system.php
                </li>
                <li>
                	var/logs/config.log.php
                </li>
            </ul>
            In other words, anything this module does can be done by directly editing those two files. Nonetheless, unless you know what you're doing, using this module to configure logging is the recommended way to go.
            </p>
    
            <h3>How to use it?</h3>
            <p>You can: </p>
            <ul>
                <li>
                	List the loggers that are currently configured. From here you can then edit the settings for each logger, including whether or not it is active. Note that an active logger will not do anything until you enable loggind in the modifyconfig page (see below).
                </li>
                <li>
                	Turn Xaraya logging on/off globally. This makes Xaraya log (or not) according to the loggers configured. This setting in the modifyconfig page is identical to the setting found under the logging tab in the modifyconfig page of the base module. The latter can be found <a href="#xarController::URL('base','admin','modifyconfig',array('tab'=>'logging'))#" target="_blank">here</a>.
                </li>
            </ul>
            <p>
                The loggers are shipped with the Xaraya core and are located in lib/xaraya/log/loggers. You can, of course, run several loggers simultaneously, but be aware that this many degrade performance, not to mention using up disk space faster for loggers that write to disk or database.
            </p>
            <p>
                The logging system depends on the timezone settings found <a href="#xarController::URL('base','admin','modifyconfig',array('tab'=>'other'))#" target="_blank">here</a>. You should set the Host Timezone to the timezone you want the timestamps of the logged messages to show.
            </p>
    
            <h3>Fallback System:</h3>
            <p>If logging is set to on in this module and none of the loggers are active, then there is a fallback system that will log to a text file. This fallback can be configured under the logging tab in the modifyconfig page of the base module, found <a href="#xarController::URL('base','admin','modifyconfig',array('tab'=>'logging'))#" target="_blank">here</a>.
            </p>
            <h3>
                Message levels
            </h3>
            <p>
            	The Xaraya loggers recognize the following message levels. Each logger can be configured to track one or more of these message levels.
            </p>
            <div class="xar-row">
            	<div class="xar-col-condensed">
            	</div>
            	<div class="xar-col">
					<table style="border: 1px solid; width: 220px">
						<tr>
							<th>
								Name
							</th>
							<th>
								Numeric Value
							</th>
							<th>
								Application
							</th>
						</tr>
						<tr>
							<td>EMERGENCY</td><td style="text-align: center">1</td>
							<td>Tracks errors that call for immediate intervention</td>
						</tr>
						<tr>
							<td>ALERT</td><td style="text-align: center">2</td>
							<td>Tracks errors that call for intervention</td>
						</tr>
						<tr>
							<td>CRITICAL</td><td style="text-align: center">3</td>
							<td>Tracks errors that result in major consequences for processing</td>
						</tr>
						<tr>
							<td>ERROR</td><td style="text-align: center">4</td>
							<td>Tracks behavior that is unexpected or undesired, with minor consequences for processing</td>
						</tr>
						<tr>
							<td>WARNING</td><td style="text-align: center">5</td>
							<td>Tracks anomalities or abnormal behavior without consequences for processing</td>
						</tr>
						<tr>
							<td>NOTICE</td><td style="text-align: center">6</td>
							<td>Tracks high level core processes and main module processes</td>
						</tr>
						<tr>
							<td>INFO</td><td style="text-align: center">7</td>
							<td>Tracks low level core and module processes</td>
						</tr>
						<tr>
							<td>DEBUG</td><td style="text-align: center">8</td>
							<td>Used for fine grained debugging</td>
						</tr>
					</table>
            	</div>
            </div>
            <h3>
                Available loggers
            </h3>
            <ul>
                <li>The errorlog logger: writes log data to the web server's error log</li>
                <li>The html logger: writes log data to an HTML file</li>
                <li><s>The javascript logger: opens a debug window with the log information</s></li>
                <li>The mail logger: sends log data to a recipient via email</li>
                <li><s>The mozilla logger: opens a debug window with the log information</s></li>
                <li>The simple logger: writes log data to a text file</li>
                <li>The sql logger: writes log data to a database table</li>
                <li>The syslog logger: write log data to server logs</li>
            </ul>
            <p>
            	The loggers are all subclasses of a parent xarLogger class, found at lib/xaraya/log/loggers/xarLogger.php. This class is responsible for:
            </p>
            <ul>
                <li>Defining the log message levels that Xaraya uses (see above)</li>
                <li>Defining the timestamp formats that are used in displays.</li>
                <li>Creating a unique universal identifier (UUID) based on PHP's random_bytes function. This is used by several of the loggers to differentiate between one pageview and the next.</li>
            </ul>
            <h3>
                Notes on the errorlog logger
            </h3>
            <p>
            	This logger writes to PHP's error log, which can be accessed by the PHP funcion error_log(), as described <a href="https://www.php.net/manual/en/function.error-log.php" target="_blank">here</a>.
            </p>
            <h3>
                Notes on the mail logger
            </h3>
            <p>
                The mail logger will send you an email with the error message and some additional information. You cannot edit the lay-out and content of the message via the mail templates as the message is created by PHP code.
            </p>
            <p>
                Because of the vagaries and continuously changing (improving) standards for email and the major email providers, it is recommended that you first test Xaraya's email functionality in your environment and make sure everything works. You can do this by sending test messages from the mail module. Helpful information can also be had by setting the mail module's debug functionality, which is found on the mail module's modifyconfig page <a href="#xarController::URL('mail','admin','modifyconfig',array('tab'=>'general'))#" target="_blank">here</a>.
            </p>
            <h3>
                Notes on the SQL logger
            </h3>
            <p>
                The SQL logger needs a database table to write its data to. This table should be added to your database. For MySQL you can use the following code:
            </p>
                <pre>
                CREATE TABLE `xar_log_messages` (
                  `id` int(10) NOT NULL,
                  `ident` varchar(32) NOT NULL,
                  `logtime` varchar(255) NOT NULL DEFAULT '',
                  `priority` tinyint(4) NOT NULL DEFAULT '0',
                  `message` text NOT NULL
                  PRIMARY KEY  (`id`)
                );
                </pre>
            <p>
                The SQL logger will log all messages to this database table. Currently, there is no interface to manage the entries. In configuring this logger, make sure that your entry for the SQL Table parameter corresponds to the name of the database table you have created.
            </p>
            <h3>
                Notes on the syslog logger
            </h3>
            <p>
            	Depending on its configuration, this logger writes to a server log. as described <a href="https://www.php.net/manual/en/function.syslog.php" target="_blank">here</a>. It should be noted that different server operating systems have different types of logs. We make no claims about which of this loggers configurations will work in any given case.
            </p>
            <h3>
                Further Information
            </h3>
            <p>
                To be added on occasion!
            </p>
            <p class="xar-sub">
                <strong>&#160;LogConfig Module Overview</strong><br />&#160;Version 1.0.0&#160; 2022-5-01
            </p>
    </div>
</xar:template>